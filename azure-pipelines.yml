trigger:
  branches:
    include:
      - master
  tags:
    include:
      - "*"

pr:
  branches:
    include:
      - master

pool:
  vmImage: "Ubuntu 16.04"

variables:
  GITHUB_TOKEN: "$(git.token)"
  GOBIN: "$(GOPATH)/bin" # Go binaries path
  GOROOT: "/usr/local/go1.13" # Go installation path
  GOPATH: "$(Build.SourcesDirectory)/gopath" # Go workspace path
  modulePath: "$(GOPATH)/src/github.com/trustwallet/blockatlas" # Path to the module's code

jobs:
  - job: Pipeline
    steps:
      - script: |
          mkdir -p '$(GOBIN)'
          mkdir -p '$(GOPATH)/pkg'
          mkdir -p '$(modulePath)'
          shopt -s extglob
          shopt -s dotglob
          mv !(gopath) '$(modulePath)'
          echo '##vso[task.prependpath]$(GOBIN)'
          echo '##vso[task.prependpath]$(GOROOT)/bin'
          echo '$(go env)'
        displayName: "Set up the Go workspace"

      - script: |
          go version
          go get -v -t -d ./...
        workingDirectory: "$(modulePath)"
        displayName: "Get dependencies"

      - script: make govet
        workingDirectory: "$(modulePath)"
        displayName: "Run go vet"

      - script: make test
        workingDirectory: "$(modulePath)"
        displayName: "Run unit tests"

      - script: |
          go get github.com/gavv/httpexpect
          make functional
        workingDirectory: "$(modulePath)"
        displayName: "Run functional tests for new PR's"
        condition: ne(variables['build.sourceBranch'], 'refs/heads/master')
        continueOnError: true

      - script: |
          go get github.com/gavv/httpexpect
          make functional
        workingDirectory: "$(modulePath)"
        displayName: "Run functional tests for new releases"
        condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
        continueOnError: false

      - script: make integration
        workingDirectory: "$(modulePath)"
        displayName: "Run integration tests"

      - script: make go-build
        workingDirectory: "$(modulePath)"
        displayName: "Build"
        condition: not(startsWith(variables['build.sourceBranch'], 'refs/tags/'))

      - script: |
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
          ./bin/goreleaser --rm-dist
        workingDirectory: "$(modulePath)"
        displayName: "Go Releaser"
        condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
